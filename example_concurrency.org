* 순서
  - threading_semaphore 까지는 thread_intro branch.
  - Queue 연습 부터는 master_branch
** threading
   1. download_images()
      for구문의 다운로드 부분을 download_image() 로 따로 빼낸다
   2. download_image() 를 쓰레드로 돌린다
** threading_Lock
   1. download_iamge()
      - 다운로드 받은 전체 용량을 downloaded_bytes 변수에 누적 저장한다
      - downloaded_bytes변수는 class instance 변수로 설정한다.
** threading_semaphore
   1. download_image()가 쓰레드는 url 개수 만큼 돌아가지만 한번에 4개씩만
      다운로드 가능하도록  다운로드 코드 부분에 Semaphore를 건다
   2. with_ context문으로 구현
** Queue 연습 1
   1. download_images와 perform_resize 를 Que를 통해 멀티쓰레드로 돌린다.
   2. 맨 처음 원본으로 돌아간다(Thread 적용이전 버전)
   3. download_images에서 다운완료된 Url을 바로 Queue 에 넣는다
   4. perform_resize 에서 Queue에 목록을 가져와 resize 수행
   5. main loop에서 download_images 와 perform_resize 를 쓰레드로 2개 동시 실행한다.
** Queue 연습 2
   1. Queue 연습1의 download_images를 multithred로 동시에 받아는다
   2. multithred 용 download_thread
      - queue에서 Url을 가져온다
      - que 에 미리 url이 다 차 있으므로 queue가 empty이면 thread를 멈춘다 --> .get(block=False)
      - get(block=False) 에서 Empty가 되면 예외를 발생하므로 Try 구문으로 구현해서 예외를 받아준다.
      - download  루틴은 download_images  에서 긁어 온다
   3. make_thumbnail
      - que 에 한번에 url list를 저장한다.
      - 4개의 download image thread를 만든다.
   4. Queue 정리
      1. dl_que 에 다운로드 경로, que 에 다운받은 파일의 이름이 있다.
      2. download_image는 dl_que 에서 경로를 get()하여 다운받는다
      3. 다운이 완료 되면 que 에 다운 받은 파일이름을 저장한다.
      4. resize() 는 que 에 있는 파일을 resize  한다.
      5. resize는 que 작업 완료를 나타내는 poison pill(None)값으로 쓰레드가 종료된다.
      6. 그럼 누가 언제 poison pill(None)을 que 에 저장해야 할까.?
      7. 만약 download_image의 쓰레드 중 하나가 dl_que가 empty 된 것을 확인하고 더 이상 작업이 없다 생각해서
         None 을 que에 넣었을 경우.
         - 다운로드 실행 중인 download_image 의 다른 쓰레드 결과 파일 값이 que 에 저장 되지 못한다.
      8. 그래서 dl_que 의 작업이 완료 되기까지 기다린 다음 (que 에 파일목록이 다 완성된 시점) 마지막에 que 에 None 값을 저장한다.
         
** multiprocess , threads
   - download_image
     1. IMG_URLS의 원소를 dl_que 에 일괄 put 한다.
     2. download_image 가 dl_que.get()
     3. download 끝나면 파일이름을 self.img_queue 에 put 한다.
   - perform_resize
     1. self.img_queue  에 파일이 들어오면 바로 que값을 가져온다
     2. 리사이지징 작업

   - perform_resize는 poison pill 로 중지 되므로 , 작업이 끝날 때 core 개수 만큼 None 을 img_queue 에 put 한다.
   - image 다운로드가 끝난다음 img_queue 에 파일 이름이 들어간다. 따라서 img_queue 에 파일 이름이 가기 전에 multiprocess 가 만들어지면
     바로 다음 poison pill이 삽입되는 코드로 넘어가고 멀티프로세스는 처리가안된다.
     이를 방지하기위해 다운로드 실행이 되고 1~2초 정도 time.sleep(2)을 둬야 처리가 된다. 
** Shared_memory 사용 , 다운받은 용량, 리사이즈 용량
   - dl_que 는 class  변수로 정의 할 수 없다. class 변수는 다른 class method에 의해 값이 바뀔 수 있으므로 Serialized대상이 안된다
     따라서 지역함수에서 dl_que를 만들고 그 지역함수 안에서 thread 를 만들어 각 thread 에게 전달해야 한다.
   - Shared memory 는 클래스 변수로 가능하다.
     한 class개체의 메쏘드를 multiprocessing 하는 것 이므로 그 클래스내 메쏘드가 공유하는 공간인 Class 변수로 만들어야 한다.
   - Multiprocessing 에서 공유변수는  Main 에서 Queue 만들어 각 process의 가 주는 값을 queue  에 저장해서 취합하는 방법도 있고
     Sharedmemory, Manager를 쓸 수 있다. 공유 값이 단일 변수이면 속도가 빠른 Sharedmemoryㄹ들 쓰자

   - sharedmemory 개체의 값을 수정할 때는 락을 걸어야 한다. 그 값을 쓰기 , 읽기와 같은 하나의 동작만 할 때는 internal  lock이 자동으로 되지만
     읽고 업데이트(쓰기) 같은 두 동작을 할 때는 명시적으로 Lock을 호출해야 한다.
     ~with shrared변수.get_lock():
         업데이트코드~
